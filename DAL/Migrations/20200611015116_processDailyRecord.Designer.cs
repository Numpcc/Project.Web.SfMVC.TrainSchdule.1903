// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200611015116_processDailyRecord")]
    partial class processDailyRecord
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.AdminDivision", b =>
                {
                    b.Property<int>("Code");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longtitude");

                    b.Property<string>("Name");

                    b.Property<int>("ParentCode");

                    b.Property<string>("ShortName");

                    b.HasKey("Code");

                    b.ToTable("AdminDivisions");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.Apply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyAuditStreamSolutionRuleId");

                    b.Property<string>("AuditLeader");

                    b.Property<Guid?>("BaseInfoId");

                    b.Property<DateTime?>("Create");

                    b.Property<bool>("Hidden");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("NowAuditStepId");

                    b.Property<Guid?>("RecallId");

                    b.Property<Guid?>("RequestInfoId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplyAuditStreamSolutionRuleId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("NowAuditStepId");

                    b.HasIndex("RequestInfoId");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyId");

                    b.Property<string>("FirstMemberCompanyCode");

                    b.Property<string>("FirstMemberCompanyName");

                    b.Property<int>("Index");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("MembersAcceptToAudit");

                    b.Property<string>("MembersFitToAudit");

                    b.Property<string>("Name");

                    b.Property<int>("RequireMembersAcceptCount");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.ToTable("ApplyAuditSteps");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Nodes");

                    b.HasKey("Id");

                    b.ToTable("ApplyAuditStreams");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamNodeAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditMembers");

                    b.Property<int>("AuditMembersCount");

                    b.Property<string>("Companies");

                    b.Property<string>("CompanyCodeLength");

                    b.Property<string>("CompanyRefer");

                    b.Property<string>("CompanyTags");

                    b.Property<DateTime>("Create");

                    b.Property<string>("Description");

                    b.Property<string>("Duties");

                    b.Property<string>("DutiesTags");

                    b.Property<int>("DutyIsMajor");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ApplyAuditStreamNodeActions");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditMembers");

                    b.Property<int>("AuditMembersCount");

                    b.Property<string>("Companies");

                    b.Property<string>("CompanyCodeLength");

                    b.Property<string>("CompanyRefer");

                    b.Property<string>("CompanyTags");

                    b.Property<DateTime>("Create");

                    b.Property<string>("Description");

                    b.Property<string>("Duties");

                    b.Property<string>("DutiesTags");

                    b.Property<int>("DutyIsMajor");

                    b.Property<bool>("Enable");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.Property<Guid?>("SolutionId");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ApplyAuditStreamSolutionRules");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyBaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<string>("CompanyName");

                    b.Property<string>("CreateById");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int?>("DutiesCode");

                    b.Property<string>("DutiesName");

                    b.Property<string>("FinnalAuditCompany");

                    b.Property<string>("FromId");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("RealName");

                    b.Property<Guid?>("SocialId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("CreateById");

                    b.HasIndex("DutiesCode");

                    b.HasIndex("FromId");

                    b.HasIndex("SocialId");

                    b.ToTable("ApplyBaseInfos");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ByTransportation");

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<int>("OnTripLength");

                    b.Property<string>("Reason");

                    b.Property<DateTime?>("StampLeave");

                    b.Property<DateTime?>("StampReturn");

                    b.Property<string>("VacationDescription");

                    b.Property<int>("VacationLength")
                        .HasColumnName("VocationLength");

                    b.Property<int?>("VacationPlaceCode");

                    b.Property<string>("VacationPlaceName")
                        .HasColumnName("VocationPlaceName");

                    b.Property<string>("VacationType")
                        .HasColumnName("VocationType");

                    b.HasKey("Id");

                    b.HasIndex("VacationPlaceCode");

                    b.ToTable("ApplyRequests");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyId");

                    b.Property<string>("AuditingById");

                    b.Property<DateTime?>("HandleStamp");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.Property<int>("StepIndex");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("AuditingById");

                    b.ToTable("ApplyResponses");
                });

            modelBuilder.Entity("DAL.Entities.BBS.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContentId");

                    b.Property<DateTime>("Create");

                    b.Property<string>("CreateById");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CreateById");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contents");

                    b.Property<DateTime>("Create");

                    b.Property<string>("CreateById");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Images");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("PostId");

                    b.Property<Guid?>("ReplySubjectId");

                    b.Property<string>("ReplyToId");

                    b.Property<string>("Title");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplySubjectId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("PostContents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PostContent");
                });

            modelBuilder.Entity("DAL.Entities.BBS.SignIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ComboTimes");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("SignId");

                    b.HasKey("Id");

                    b.ToTable("SignIns");
                });

            modelBuilder.Entity("DAL.Entities.Common.ApplicationUpdateRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("Create");

                    b.ToTable("ApplicationUpdateRecords");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<string>("CreateById");

                    b.Property<string>("Device");

                    b.Property<DateTime>("Expire");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Key");

                    b.Property<string>("Target");

                    b.Property<string>("UA");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("Key");

                    b.ToTable("CommonShortUrl");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrlStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<string>("Device");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("UA");

                    b.Property<Guid?>("UrlId");

                    b.Property<string>("ViewById");

                    b.HasKey("Id");

                    b.HasIndex("UrlId");

                    b.HasIndex("ViewById");

                    b.ToTable("CommonShortUrlStatistics");
                });

            modelBuilder.Entity("DAL.Entities.Company", b =>
                {
                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Name");

                    b.Property<int>("Priority");

                    b.Property<string>("Tag");

                    b.HasKey("Code");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DAL.Entities.CompanyManagers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthById");

                    b.Property<string>("CompanyCode");

                    b.Property<DateTime?>("Create");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthById");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyManagers");
                });

            modelBuilder.Entity("DAL.Entities.Duties", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMajorManager");

                    b.Property<string>("Name");

                    b.Property<string>("Tags");

                    b.Property<string>("Type");

                    b.HasKey("Code");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.FileUploadStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Current");

                    b.Property<Guid?>("FileInfoId");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<long>("Total");

                    b.Property<Guid?>("UploadCacheId");

                    b.HasKey("Id");

                    b.HasIndex("FileInfoId");

                    b.HasIndex("UploadCacheId");

                    b.ToTable("FileUploadStatuses");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UploadCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.HasKey("Id");

                    b.ToTable("UploadCaches");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.HasKey("Id");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientKey");

                    b.Property<DateTime>("Create");

                    b.Property<string>("FromClient");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<DateTime>("LastModefy");

                    b.Property<long>("Length");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("UserFileInfos");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GainGiftCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CodeId");

                    b.Property<long>("GainStamp");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("UserId");

                    b.ToTable("GainGiftCodeHistory");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GiftCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<DateTime>("InvalidTime");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("ShareBy");

                    b.Property<DateTime>("ShareTime");

                    b.Property<string>("StatusDescription");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.ToTable("GiftCodes");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enable");

                    b.Property<string>("GameId");

                    b.Property<long>("HandleInterval");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<long>("LastHandleStamp");

                    b.Property<DateTime>("LastLogin");

                    b.Property<Guid?>("LastSignInId");

                    b.HasKey("Id");

                    b.HasIndex("LastSignInId");

                    b.ToTable("GameR3Users");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Level");

                    b.Property<string>("NickName");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameR3UserInfos");
                });

            modelBuilder.Entity("DAL.Entities.Permissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Regions");

                    b.Property<string>("Role");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("DAL.Entities.RecallOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Reason");

                    b.Property<string>("RecallById");

                    b.Property<DateTime>("ReturnStramp");

                    b.HasKey("Id");

                    b.HasIndex("RecallById");

                    b.ToTable("RecallOrders");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("FilePath");

                    b.Property<byte[]>("Img");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserDiyAvatars");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.AppUsersSettleModefyRecord", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsNewYearInitData");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<double>("Length");

                    b.Property<Guid?>("SettleId");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Code");

                    b.HasIndex("SettleId");

                    b.ToTable("AppUsersSettleModefyRecord");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressCode");

                    b.Property<string>("AddressDetail");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.HasIndex("AddressCode");

                    b.ToTable("AppUserSocialInfoSettleMoments");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Settle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("LoverId");

                    b.Property<Guid?>("LoversParentId");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("PrevYearlyComsumeLength");

                    b.Property<Guid?>("SelfId");

                    b.HasKey("Id");

                    b.HasIndex("LoverId");

                    b.HasIndex("LoversParentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SelfId");

                    b.ToTable("AUserSocialInfoSettles");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<DateTime>("Time_Begin");

                    b.Property<DateTime>("Time_End");

                    b.Property<string>("TrainName");

                    b.Property<string>("TrainRankCode");

                    b.Property<string>("TrainTypeCode");

                    b.Property<Guid?>("UserTrainInfoId");

                    b.HasKey("Id");

                    b.HasIndex("TrainRankCode");

                    b.HasIndex("TrainTypeCode");

                    b.HasIndex("UserTrainInfoId");

                    b.ToTable("Train");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.TrainRank", b =>
                {
                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("TrainRank");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.TrainType", b =>
                {
                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Code");

                    b.ToTable("TrainType");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<Guid?>("ApplicationId");

                    b.Property<Guid?>("BaseInfoId");

                    b.Property<Guid?>("CompanyInfoId");

                    b.Property<Guid?>("DiyInfoId");

                    b.Property<Guid?>("SocialInfoId");

                    b.Property<Guid?>("TrainInfoId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("DiyInfoId");

                    b.HasIndex("SocialInfoId");

                    b.HasIndex("TrainInfoId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Device");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<int>("Operation");

                    b.Property<int>("Rank");

                    b.Property<bool>("Success");

                    b.Property<string>("UA");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplicationSettingId");

                    b.Property<string>("AuthKey");

                    b.Property<DateTime?>("Create");

                    b.Property<string>("Email");

                    b.Property<string>("InvitedBy");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("PermissionId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSettingId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AppUserApplicationInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<DateTime?>("LastSubmitApplyTime");

                    b.HasKey("Id");

                    b.ToTable("AppUserApplicationSettings");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserBaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Cid")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("Hometown")
                        .IsRequired();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<bool>("PasswordModefy");

                    b.Property<bool>("PrivateAccount");

                    b.Property<string>("RealName")
                        .IsRequired();

                    b.Property<DateTime>("Time_BirthDay");

                    b.Property<DateTime>("Time_Party");

                    b.Property<DateTime>("Time_Work");

                    b.HasKey("Id");

                    b.ToTable("AppUserBaseInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyCode");

                    b.Property<int?>("DutiesCode");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<int?>("TitleCode");

                    b.Property<DateTime?>("TitleDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("DutiesCode");

                    b.HasIndex("TitleCode");

                    b.ToTable("AppUserCompanyInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyTitle", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("TitleType");

                    b.Property<int>("VacationDay");

                    b.HasKey("Code");

                    b.ToTable("UserCompanyTitles");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserDiyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<Guid?>("AvatarId");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("AppUserDiyInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserSocialInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressCode");

                    b.Property<string>("AddressDetail");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Phone");

                    b.Property<Guid?>("SettleId");

                    b.HasKey("Id");

                    b.HasIndex("AddressCode");

                    b.HasIndex("SettleId");

                    b.ToTable("AppUserSocialInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserTrainInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.HasKey("Id");

                    b.ToTable("UserTrainInfo");
                });

            modelBuilder.Entity("DAL.Entities.VacationDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("VocationDescriptions");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsDailyProcessRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyMembersCount");

                    b.Property<string>("CompanyCode");

                    b.Property<int>("CompleteYearlyVacationCount");

                    b.Property<int>("MembersCount");

                    b.Property<int>("MembersVacationDayLessThanP60");

                    b.Property<DateTime>("Target");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("StatisticsDailyProcessRates");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsNewApply.StatisticsApplyComplete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode");

                    b.Property<int>("Day");

                    b.Property<byte>("From");

                    b.Property<DateTime>("Target");

                    b.Property<byte>("To");

                    b.Property<string>("Type");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("StatisticsCompleteApplies");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsNewApply.StatisticsApplyNew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode");

                    b.Property<int>("Day");

                    b.Property<byte>("From");

                    b.Property<DateTime>("Target");

                    b.Property<byte>("To");

                    b.Property<string>("Type");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("StatisticsNewApplies");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.StatisticsAppliesProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyCount");

                    b.Property<int>("ApplySumDayCount");

                    b.Property<string>("CompanyCode");

                    b.Property<int>("CompleteVacationExpectDayCount");

                    b.Property<int>("CompleteVacationRealDayCount");

                    b.Property<DateTime>("Target");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("StatisticsAppliesProcesses");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationAdditional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyRequestId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ApplyRequestId");

                    b.ToTable("VocationAdditionals");
                });

            modelBuilder.Entity("DAL.Entities.XlsTemplete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Create");

                    b.Property<string>("CreateById");

                    b.Property<string>("Description");

                    b.Property<string>("FileName");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("XlsTempletes");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.Standard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseStandard");

                    b.Property<string>("ExpressionWhenFullGrade");

                    b.Property<string>("GradePairs");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<Guid?>("SubjectId");

                    b.Property<int>("gender");

                    b.Property<int>("maxAge");

                    b.Property<int>("minAge");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CountDown");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("IsRemovedDate");

                    b.Property<string>("Name");

                    b.Property<int>("ValueFormat");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.BBS.Post", b =>
                {
                    b.HasBaseType("DAL.Entities.BBS.PostContent");

                    b.HasDiscriminator().HasValue("Post");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.Apply", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", "ApplyAuditStreamSolutionRule")
                        .WithMany()
                        .HasForeignKey("ApplyAuditStreamSolutionRuleId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyBaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStep", "NowAuditStep")
                        .WithMany()
                        .HasForeignKey("NowAuditStepId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyRequest", "RequestInfo")
                        .WithMany()
                        .HasForeignKey("RequestInfoId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStep", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.Apply")
                        .WithMany("ApplyAllAuditStep")
                        .HasForeignKey("ApplyId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStream", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyBaseInfo", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.Duties", "Duties")
                        .WithMany()
                        .HasForeignKey("DutiesCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DAL.Entities.UserInfo.UserSocialInfo", "Social")
                        .WithMany()
                        .HasForeignKey("SocialId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyRequest", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "VacationPlace")
                        .WithMany()
                        .HasForeignKey("VacationPlaceCode");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyResponse", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.Apply")
                        .WithMany("Response")
                        .HasForeignKey("ApplyId");

                    b.HasOne("DAL.Entities.UserInfo.User", "AuditingBy")
                        .WithMany()
                        .HasForeignKey("AuditingById");
                });

            modelBuilder.Entity("DAL.Entities.BBS.Like", b =>
                {
                    b.HasOne("DAL.Entities.BBS.PostContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostContent", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.BBS.Post")
                        .WithMany("ChildContents")
                        .HasForeignKey("PostId");

                    b.HasOne("DAL.Entities.BBS.PostContent", "ReplySubject")
                        .WithMany()
                        .HasForeignKey("ReplySubjectId");

                    b.HasOne("DAL.Entities.UserInfo.User", "ReplyTo")
                        .WithMany()
                        .HasForeignKey("ReplyToId");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrl", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrlStatistics", b =>
                {
                    b.HasOne("DAL.Entities.Common.ShortUrl", "Url")
                        .WithMany()
                        .HasForeignKey("UrlId");

                    b.HasOne("DAL.Entities.UserInfo.User", "ViewBy")
                        .WithMany()
                        .HasForeignKey("ViewById");
                });

            modelBuilder.Entity("DAL.Entities.CompanyManagers", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "AuthBy")
                        .WithMany()
                        .HasForeignKey("AuthById");

                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.FileUploadStatus", b =>
                {
                    b.HasOne("DAL.Entities.FileEngine.UserFileInfo", "FileInfo")
                        .WithMany()
                        .HasForeignKey("FileInfoId");

                    b.HasOne("DAL.Entities.FileEngine.UploadCache")
                        .WithMany("FileStatus")
                        .HasForeignKey("UploadCacheId");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFileInfo", b =>
                {
                    b.HasOne("DAL.Entities.FileEngine.UserFileInfo", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GainGiftCode", b =>
                {
                    b.HasOne("DAL.Entities.Game_r3.GiftCode", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId");

                    b.HasOne("DAL.Entities.Game_r3.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.User", b =>
                {
                    b.HasOne("DAL.Entities.BBS.SignIn", "LastSignIn")
                        .WithMany()
                        .HasForeignKey("LastSignInId");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.UserInfo", b =>
                {
                    b.HasOne("DAL.Entities.Game_r3.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.RecallOrder", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "RecallBy")
                        .WithMany()
                        .HasForeignKey("RecallById");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Avatar", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.AppUsersSettleModefyRecord", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Settle.Settle")
                        .WithMany("PrevYealyLengthHistory")
                        .HasForeignKey("SettleId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Moment", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Settle", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Lover")
                        .WithMany()
                        .HasForeignKey("LoverId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "LoversParent")
                        .WithMany()
                        .HasForeignKey("LoversParentId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Self")
                        .WithMany()
                        .HasForeignKey("SelfId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Train", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.TrainRank", "TrainRank")
                        .WithMany()
                        .HasForeignKey("TrainRankCode");

                    b.HasOne("DAL.Entities.UserInfo.TrainType", "TrainType")
                        .WithMany()
                        .HasForeignKey("TrainTypeCode");

                    b.HasOne("DAL.Entities.UserInfo.UserTrainInfo")
                        .WithMany("Trains")
                        .HasForeignKey("UserTrainInfoId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.User", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserApplicationInfo", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("DAL.Entities.UserInfo.UserBaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserCompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserDiyInfo", "DiyInfo")
                        .WithMany()
                        .HasForeignKey("DiyInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserSocialInfo", "SocialInfo")
                        .WithMany()
                        .HasForeignKey("SocialInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserTrainInfo", "TrainInfo")
                        .WithMany()
                        .HasForeignKey("TrainInfoId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId");

                    b.HasOne("DAL.Entities.Permissions", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyInfo", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.Duties", "Duties")
                        .WithMany()
                        .HasForeignKey("DutiesCode");

                    b.HasOne("DAL.Entities.UserInfo.UserCompanyTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleCode");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserDiyInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserSocialInfo", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Settle", "Settle")
                        .WithMany()
                        .HasForeignKey("SettleId");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationAdditional", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyRequest")
                        .WithMany("AdditialVacations")
                        .HasForeignKey("ApplyRequestId");
                });

            modelBuilder.Entity("DAL.Entities.XlsTemplete", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.Standard", b =>
                {
                    b.HasOne("DAL.Entities.ZX.Phy.Subject")
                        .WithMany("Standards")
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainSchdule.DAL.Data;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190502145314_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Apply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Company");

                    b.Property<DateTime>("Create");

                    b.Property<string>("FromID");

                    b.Property<bool>("Hidden");

                    b.Property<string>("Reason");

                    b.Property<Guid?>("RequestId");

                    b.Property<int>("Status");

                    b.Property<Guid?>("stampId");

                    b.Property<string>("xjlb");

                    b.HasKey("Id");

                    b.HasIndex("FromID");

                    b.HasIndex("RequestId");

                    b.HasIndex("stampId");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("DAL.Entities.ApplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ltts");

                    b.Property<int>("xjts");

                    b.HasKey("Id");

                    b.ToTable("ApplyRequests");
                });

            modelBuilder.Entity("DAL.Entities.ApplyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyId");

                    b.Property<string>("AuditingByID");

                    b.Property<string>("CompanyCode");

                    b.Property<DateTime>("HandleStamp");

                    b.Property<string>("Remark");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("AuditingByID");

                    b.HasIndex("CompanyCode");

                    b.ToTable("ApplyResponses");
                });

            modelBuilder.Entity("DAL.Entities.ApplyStamp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("gdsj");

                    b.Property<DateTime>("ldsj");

                    b.HasKey("Id");

                    b.ToTable("ApplyStamps");
                });

            modelBuilder.Entity("DAL.Entities.Duties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.BlackList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockedUserId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BlackLists");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Bookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("PhotoId");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserID");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerID");

                    b.Property<Guid?>("PhotoId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PhotoId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Company", b =>
                {
                    b.Property<string>("Code");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Name");

                    b.Property<string>("ParentCode");

                    b.HasKey("Code");

                    b.HasIndex("ParentCode");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Confirmed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdminID");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("AdminID");

                    b.HasIndex("UserID");

                    b.ToTable("Confirmed");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Filter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Following", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FollowedUserID");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("FollowedUserID");

                    b.HasIndex("UserID");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerID");

                    b.Property<Guid?>("PhotoId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerID");

                    b.HasIndex("PhotoId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Apply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("审批流Id");

                    b.Property<Guid?>("申请信息Id");

                    b.HasKey("Id");

                    b.HasIndex("审批流Id");

                    b.HasIndex("申请信息Id");

                    b.ToTable("Apply");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("单位信息Id");

                    b.HasKey("Id");

                    b.HasIndex("单位信息Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreateId");

                    b.Property<Guid?>("ModifyId");

                    b.Property<Guid?>("QueryId");

                    b.Property<Guid?>("RemoveId");

                    b.HasKey("Id");

                    b.HasIndex("CreateId");

                    b.HasIndex("ModifyId");

                    b.HasIndex("QueryId");

                    b.HasIndex("RemoveId");

                    b.ToTable("PermissionRange");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Permissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ApplyId");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("OwnerId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasFilter("[OwnerId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("PermittingAction");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthBy");

                    b.Property<DateTime>("Create");

                    b.Property<string>("Path");

                    b.Property<Guid?>("PermittingActionId");

                    b.HasKey("Id");

                    b.HasIndex("PermittingActionId");

                    b.ToTable("PermittingAuth");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("基本信息Id");

                    b.Property<Guid?>("社会关系Id");

                    b.Property<Guid?>("职务信息Id");

                    b.HasKey("Id");

                    b.HasIndex("基本信息Id");

                    b.HasIndex("社会关系Id");

                    b.HasIndex("职务信息Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Aperture");

                    b.Property<int>("CountViews");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<double?>("Exposure");

                    b.Property<Guid?>("FilterId");

                    b.Property<double?>("FocalLength");

                    b.Property<int?>("Iso");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Model");

                    b.Property<string>("OwnerID");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.HasIndex("OwnerID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.PhotoReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("PhotoId");

                    b.Property<string>("Text");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("UserID");

                    b.ToTable("PhotoReports");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<DateTime>("Birth");

                    b.Property<int>("Gender");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Taging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("PhotoId");

                    b.Property<Guid?>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TagId");

                    b.ToTable("Tagings");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.User", b =>
                {
                    b.Property<string>("ID");

                    b.Property<string>("About");

                    b.Property<string>("Address");

                    b.Property<string>("AuthKey");

                    b.Property<string>("Avatar");

                    b.Property<string>("CompanyCode");

                    b.Property<DateTime>("Date");

                    b.Property<Guid?>("DutiesId");

                    b.Property<int>("Gender");

                    b.Property<string>("InvitedBy");

                    b.Property<string>("Phone");

                    b.Property<bool>("PrivateAccount");

                    b.Property<int>("Privilege");

                    b.Property<string>("RealName");

                    b.Property<string>("UserName");

                    b.Property<string>("WebSite");

                    b.HasKey("ID");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("DutiesId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.UserReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("ReportedUserID");

                    b.Property<string>("Text");

                    b.Property<string>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ReportedUserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserReports");
                });

            modelBuilder.Entity("DAL.Entities.Apply", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromID");

                    b.HasOne("DAL.Entities.ApplyRequest", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("DAL.Entities.ApplyStamp", "stamp")
                        .WithMany()
                        .HasForeignKey("stampId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyResponse", b =>
                {
                    b.HasOne("DAL.Entities.Apply")
                        .WithMany("Response")
                        .HasForeignKey("ApplyId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "AuditingBy")
                        .WithMany()
                        .HasForeignKey("AuditingByID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.BlackList", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Bookmark", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Comment", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Photo", "Photo")
                        .WithMany("Comments")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Company", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Company", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentCode");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Confirmed", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Following", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("FollowedUserID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Like", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Photo", "Photo")
                        .WithMany("Likes")
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Apply", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "审批流")
                        .WithMany()
                        .HasForeignKey("审批流Id");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "申请信息")
                        .WithMany()
                        .HasForeignKey("申请信息Id");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Company", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "单位信息")
                        .WithMany()
                        .HasForeignKey("单位信息Id");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction", "Create")
                        .WithMany()
                        .HasForeignKey("CreateId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction", "Modify")
                        .WithMany()
                        .HasForeignKey("ModifyId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction", "Remove")
                        .WithMany()
                        .HasForeignKey("RemoveId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.Permissions", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.Apply", "Apply")
                        .WithMany()
                        .HasForeignKey("ApplyId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "Owner")
                        .WithOne("Permission")
                        .HasForeignKey("TrainSchdule.DAL.Entities.UserInfo.Permission.Permissions", "OwnerId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAuth", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermittingAction")
                        .WithMany("PermittingAuths")
                        .HasForeignKey("PermittingActionId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Permission.User", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "基本信息")
                        .WithMany()
                        .HasForeignKey("基本信息Id");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "社会关系")
                        .WithMany()
                        .HasForeignKey("社会关系Id");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Permission.PermissionRange", "职务信息")
                        .WithMany()
                        .HasForeignKey("职务信息Id");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Photo", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Filter", "Filter")
                        .WithMany("Photos")
                        .HasForeignKey("FilterId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.PhotoReport", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.Taging", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.User", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.Duties", "Duties")
                        .WithMany()
                        .HasForeignKey("DutiesId");
                });

            modelBuilder.Entity("TrainSchdule.DAL.Entities.UserInfo.UserReport", b =>
                {
                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "ReportedUser")
                        .WithMany()
                        .HasForeignKey("ReportedUserID");

                    b.HasOne("TrainSchdule.DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
